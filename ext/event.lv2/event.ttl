# LV2 Events Extension
# Copyright (C) 2008 David Robillard <d@drobilla.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

@prefix ev:    <http://lv2plug.in/ns/ext/event#> .
@prefix lv2:   <http://lv2plug.in/ns/lv2core#> .
@prefix lv2ev: <http://lv2plug.in/ns/ext/event#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix doap:  <http://usefulinc.com/ns/doap#> .
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .

<http://lv2plug.in/ns/ext/event> a lv2:Specification ;
	doap:license <http://usefulinc.com/doap/licenses/mit> ;
	doap:name "LV2 Events" ;
	rdfs:seeAlso "event-helpers.h" ;
    doap:release [
        doap:revision "1" ;
        doap:created "2008-04-04" ;
    ] ;
	doap:maintainer [
		a foaf:Person ;
		foaf:name "David Robillard" ;
		foaf:homepage <http://drobilla.net/> ;
		rdfs:seeAlso <http://drobilla.net/drobilla.xrdf>
	] , [
		a foaf:Person ;
		foaf:name "Lars Luthman" ;
    ] ;
	rdfs:comment """
This extension defines a generic time-stamped event port type, which can be
used to create plugins that read and write real-time events, such as MIDI,
OSC, or any other type of event payload.  The type(s) of event supported by
a port is defined in the data file for a plugin, for example:
<pre>
&lt;http://example.org/some-plugin&gt;
	lv2:port [
		a ev:EventPort, lv2:InputPort ;
		lv2:index 0 ;
		ev:supportsEvent &lt;http://lv2plug.in/ns/ext/midi#MidiEvent&gt; ;
		lv2:symbol "midi_input" ;
		lv2:name "MIDI input" ;
	] .
</pre>
""" .

ev:EventPort a rdfs:Class ;
    rdfs:label      "Event port" ;
    rdfs:subClassOf lv2:Port ;
    rdfs:comment    """
Ports of this type will be connected to a struct of type LV2_Event_Buffer,
defined in event.h.  These ports contain a sequence of generic events
(possibly several types mixed in a single stream), the specific types of
which are defined by some URI in another LV2 extension.
""" .


ev:Event a rdfs:Class ;
	rdfs:label      "LV2 event" ;
	rdfs:comment    """
A single generic time-stamped event.

An lv2ev:EventPort contains an LV2_Event_Buffer which contains a sequence
of these events.  The binary format of LV2 events is defined by the
LV2_Event struct in event.h.

Specific event types (e.g. MIDI, OSC) are defined by extensions, and should
be rdfs:subClassOf this class.
""" .


ev:TimeStamp a rdfs:Class ;
	rdfs:label      "LV2 event time stamp" ;
	rdfs:comment    """
The time stamp of an Event.

This defines the meaning of the 'frames' and 'subframes' fields of an
LV2_Event (both unsigned 32-bit integers).
""" .


ev:FrameStamp a rdfs:Class ;
	rdfs:subClassOf ev:TimeStamp ;
	rdfs:label      "Audio frame time stamp" ;
	rdfs:comment    """
The default time stamp unit for an LV2 event: the frames field represents
audio frames (in the sample rate passed to intantiate), and the subframes
field is 1/UINT32_MAX of a frame.
""" .


ev:generic a lv2:PortProperty ;
	rdfs:label "Generic event port" ;
	rdfs:comment """
Indicates that this port does something meaningful for any event type
(e.g. event mixers, delays, serialisers, etc).  If this property is set, hosts
should consider the port suitable for any type of event.  Otherwise, hosts 
should consider the port 'appropriate' only for the specific event types
listed with :supportsEvent.  Note that plugins must gracefully handle unknown
event types whether or not this property is present.
""" .


ev:supportsEvent a rdf:Property ;
	rdfs:domain  lv2:Port ;
	rdfs:range   ev:Event ;
    rdfs:label   "Supports event type" ;
    rdfs:comment """
Indicates that this port supports or "understands" a certain event type.
For input ports, this means the plugin understands and does something useful
with events of this type.  For output ports, this means the plugin may generate
events of this type.  If the plugin never actually generates events of this type,
but might pass them through from an input, this property should not be set (use
ev:inheritsEvent for that).
Plugins with event input ports must always gracefully handle any type of event,
even if it does not 'support' it.  This property should always be set for
event types the plugin understands/generates so hosts can discover plugins
appropriate for a given scenario (e.g. plugins with a MIDI input).
Hosts are not expected to consider event ports suitable for some type of
event if the relevant :supportsEvent property is not set, unless the
lv2ev:generic property for that port is also set.
""" .


ev:inheritsEvent a rdf:Property ;
	rdfs:domain  lv2:Port ;
	rdfs:range   lv2:Port ;
    rdfs:label   "Inherits event type" ;
    rdfs:comment """
Indicates that this output port might pass through events that arrived at some
other input port (or generate an event of the same type as events arriving at
that input).  The host must always check the stamp type of all outputs when
connecting an input, but this property should be set whenever it applies.
""" .


ev:supportsTimeStamp a rdf:Property ;
	rdfs:domain  lv2:Port ;
	rdfs:range   ev:TimeStamp ;
    rdfs:label   "Supports time stamp type" ;
    rdfs:comment """
Indicates that this port supports or "understands" a certain time stamp type.
Meaningful only for input ports, the host must never connect a port to an
event buffer with a time stamp type that isn't supported by the port.
""" .


ev:generatesTimeStamp a rdf:Property ;
	rdfs:domain  lv2:Port ;
	rdfs:range   ev:TimeStamp ;
    rdfs:label   "Outputs time stamp type" ;
    rdfs:comment """
Indicates that this port may output a certain time stamp type, regardless of
the time stamp type of any input ports.  If the port outputs stamps based on
what type inputs are connected to, this property should not be set (use the
ev:inheritsTimeStamp property for that).  Hosts MUST check the time_stamp value
of any output port buffers after a call to connect_port on ANY event input
port on the plugin.  If the plugin changes the stamp_type field of an output
event buffer during a call to run(), the plugin must call the
stamp_type_changed function provided by the host in the LV2_Event_Feature
struct, if it is non-NULL.
""" .


ev:inheritsTimeStamp a rdf:Property ;
	rdfs:domain  lv2:Port ;
	rdfs:range   lv2:Port ;
    rdfs:label   "Inherits time stamp type" ;
    rdfs:comment """
Indicates that this port follows the time stamp type of an input port.
This property is not necessary, but it should be set for outputs that
base their output type on an input port so the host can make more sense
of the plugin and provide a more sensible interface.
""" .

