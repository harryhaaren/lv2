@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix work: <http://lv2plug.in/ns/ext/worker#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

<http://lv2plug.in/ns/ext/worker>
	a owl:Ontology ;
	rdfs:seeAlso <worker.h> ,
		<lv2-worker.doap.ttl> ;
	lv2:documentation """
<p>This extension allows plugins to have a non-realtime worker method, with
thread sychronisation and communication issues handled by the host.  This
allows plugins to perform non-realtime actions (such as loading files) using a
simple and portable API without having to worry about the complexities of
multi-threading.</p>

<p>Because the worker thread is implemented by the host, many plugins can share
the same thread and communication buffers, which reduces bloat and fixed
per-plugin buffer size limitations.  The host has the power to implement
threads in a suitable way, while plugins are simpler and thus less
error-prone.</p>

<p>This interface is designed to gracefully handle single-threaded synchronous
execution, in which case the host may simply run all work immediately.  This
makes it possible for the same plugin code to work with sample accuracy for
offline rendering, or in real-time with non-real-time work taking place in a
separate thread.</p>
""" .

work:interface
	a lv2:ExtensionData ;
	lv2:documentation """
<p>The interface provided by the plugin to implement a worker.  To implement
this extension, the plugin must return a valid LV2_Worker_Interface from
LV2_Descriptor::extension_data() when it is called with URI
LV2_WORKER__interface.</p>

<p>The plugin data file should describe this like so:</p>
<pre class="turtle-code">
@prefix work: &lt;http://lv2plug.in/ns/ext/worker#&gt; .

&lt;plugin&gt;
    a lv2:Plugin ;
    lv2:extensionData work:interface .
</pre>
""" .

work:schedule
	a lv2:Feature ;
	lv2:documentation """
<p>A feature which provides functions for use by the plugin to implement a
worker method.  To support this feature, the host must pass an LV2_Feature to
LV2_Descriptor::instantiate() with URI LV2_WORKER__schedule and data pointed to
an instance of LV2_Worker_Schedule.</p>
""" .
