#!/usr/bin/env python
from waflib.extras import autowaf as autowaf

# Variables for 'waf dist'
APPNAME = 'eg-sampler.lv2'
VERSION = '1.0.0'

# Mandatory variables
top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_c')
    autowaf.set_options(opt)

def configure(conf):
    conf.load('compiler_c')
    autowaf.configure(conf)
    autowaf.display_header('Sampler Configuration')

    if conf.env['MSVC_COMPILER']:
        conf.env.append_unique('CFLAGS', ['-TP', '-MD'])
    else:
        conf.env.append_unique('CFLAGS', '-std=c99')

    if not autowaf.is_child():
        autowaf.check_pkg(conf, 'lv2', atleast_version='0.2.0', uselib_store='LV2')

    autowaf.check_pkg(conf, 'sndfile', uselib_store='SNDFILE',
                      atleast_version='1.0.0', mandatory=True)
    autowaf.check_pkg(conf, 'gtk+-2.0', uselib_store='GTK2',
                      atleast_version='2.18.0', mandatory=False)

    # Set env['pluginlib_PATTERN']
    pat = conf.env['cshlib_PATTERN']
    if pat.startswith('lib'):
        pat = pat[3:]
    conf.env['pluginlib_PATTERN'] = pat
    conf.env['pluginlib_EXT'] = pat[pat.rfind('.'):]

    autowaf.display_msg(conf, "LV2 bundle directory", conf.env['LV2DIR'])
    print('')

def build(bld):
    bundle = 'eg-sampler.lv2'

    # Build manifest.ttl by substitution (for portable lib extension)
    bld(features     = 'subst',
        source       = 'manifest.ttl.in',
        target       = '%s/%s' % (bundle, 'manifest.ttl'),
        install_path = '${LV2DIR}/%s' % bundle,
        LIB_EXT      = bld.env['pluginlib_EXT'])
    
    # Copy other data files to build bundle (build/eg-sampler.lv2)
    for i in [ 'sampler.ttl', 'click.wav' ]:
        bld(rule         = 'cp ${SRC} ${TGT}',
            source       = i,
            target       = '%s/%s' % (bundle, i),
            install_path = '${LV2DIR}/%s' % bundle)

    # Create a build environment that builds module-style library names
    # e.g. eg-sampler.so instead of libeg-sampler.so
    # Note for C++ you must set cxxshlib_PATTERN instead
    penv                   = bld.env.derive()
    penv['cshlib_PATTERN'] = bld.env['pluginlib_PATTERN']

    includes = ['.']
    if autowaf.is_child:
        includes += ['../..']

    # Build plugin library
    obj = bld(features     = 'c cshlib',
              env          = penv,
              source       = ['sampler.c'],
              name         = 'sampler',
              target       = '%s/sampler' % bundle,
              install_path = '${LV2DIR}/%s' % bundle,
              use          = 'SNDFILE LV2',
              includes     = includes)

    # Build UI library
    if bld.is_defined('HAVE_GTK2'):
        obj = bld(features     = 'c cshlib',
                  env          = penv,
                  source       = 'sampler_ui.c',
                  name         = 'sampler_ui',
                  target       = '%s/sampler_ui' % bundle,
                  install_path = '${LV2DIR}/%s' % bundle,
                  use          = 'GTK2 LV2',
                  includes     = includes)

